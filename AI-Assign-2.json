{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## <div><h1 style=\"text-align:centre\"> AI ASSIGNMENT 2 </h1></div>\n",
    "<div style=\"float:right\">\n",
    "<h3> Puneeth Kashyap</h3>\n",
    "<h3> Section A</h3>\n",
    "<h3> S20180010139</h3>\n",
    "</div>\n",
    "                 "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## IMPORTS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from copy import deepcopy\n",
    "import time"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## EVALUATION,UTILITY AND HEURISTIC FUNCTIONS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "def eval_func(state):\n",
    "    b = np.reshape(state,(3,3))\n",
    "    for row in range(0, 3):  \n",
    "       \n",
    "        if b[row][0] == b[row][1] and b[row][1] == b[row][2]:  \n",
    "           \n",
    "            if b[row][0] == 'x': \n",
    "                return 10 \n",
    "            elif b[row][0] == 'o':  \n",
    "                return -10 \n",
    "            \n",
    "            \n",
    "    for col in range(0, 3):  \n",
    "       \n",
    "        if b[0][col] == b[1][col] and b[1][col] == b[2][col]:  \n",
    "           \n",
    "            if b[0][col]=='x': \n",
    "                return 10 \n",
    "            elif b[0][col] == 'o':  \n",
    "                return -10 \n",
    "            \n",
    "    \n",
    "    if b[0][0] == b[1][1] and b[1][1] == b[2][2]:  \n",
    "       \n",
    "        if b[0][0] == 'x':  \n",
    "            return 10 \n",
    "        elif b[0][0] == 'o':  \n",
    "            return -10 \n",
    "        \n",
    "       \n",
    "    if b[0][2] == b[1][1] and b[1][1] == b[2][0]:  \n",
    "       \n",
    "        if b[0][2] == 'x':  \n",
    "            return 10 \n",
    "        elif b[0][2] == 'o':  \n",
    "            return -10 \n",
    "        \n",
    "    return 0 \n",
    "\n",
    "def util_func(state,seq,size):\n",
    "    b = np.reshape(state,(size,size))\n",
    "    for row in range(0, size):\n",
    "        r=''\n",
    "        r=r.join(b[row])\n",
    "        sub1='x'*seq\n",
    "        sub2='o'*seq\n",
    "        if r.find(sub1)!=-1:   \n",
    "            return 10 \n",
    "        elif r.find(sub2)!=-1:  \n",
    "            return -10 \n",
    "            \n",
    "    bo=b.transpose()\n",
    "    for row in range(0, size): \n",
    "        c=''\n",
    "        c=c.join(bo[row])\n",
    "        sub1='x'*seq\n",
    "        sub2='o'*seq\n",
    "        if c.find(sub1)!=-1:   \n",
    "            return 10 \n",
    "        elif c.find(sub2)!=-1:  \n",
    "            return -10 \n",
    "            \n",
    "    diag1=''\n",
    "    for n in range(-(size-seq),(size-seq)+1):\n",
    "        for i in range(0,size):\n",
    "            for j in range(0,size):\n",
    "                if i-j==n:\n",
    "                    diag1+=b[i][j]\n",
    "        if diag1.find(sub1)!=-1:   \n",
    "            return 10 \n",
    "        elif diag1.find(sub2)!=-1:  \n",
    "            return -10 \n",
    "        \n",
    "    diag='' \n",
    "    for i in range(size-seq+1,size):\n",
    "        for j in range(0,i+1):\n",
    "              diag+=b[j][i-j]\n",
    "        if diag.find(sub1)!=-1:   \n",
    "            return 10 \n",
    "        elif diag.find(sub2)!=-1:  \n",
    "            return -10 \n",
    "    d=''\n",
    "    for i in range(0,size-seq+1):\n",
    "        for j in range(i,size):\n",
    "            d+=b[j][size-j-1]\n",
    "        if d.find(sub1)!=-1:   \n",
    "            return 10 \n",
    "        elif d.find(sub2)!=-1:  \n",
    "            return -10 \n",
    "    return 0 \n",
    "\n",
    "\n",
    "def heuristic(state,player):\n",
    "    if player=='x':\n",
    "        adv='o'\n",
    "    else:\n",
    "        adv='x'\n",
    "    n=0\n",
    "    b = np.reshape(state,(3,3))\n",
    "    x=[]\n",
    "    y=[]\n",
    "    visited_x=[]\n",
    "    visited_y=[]\n",
    "    flag=0\n",
    "    flagu=0\n",
    "    for i in range(0,3):\n",
    "        for j in range(0,3):\n",
    "            if b[i][j]==player:\n",
    "                x.append(i)\n",
    "                y.append(j)\n",
    "    \n",
    "    for i in range(0,len(x)):\n",
    "        xi=x[i]\n",
    "        yi=y[i]\n",
    "        if list(b[xi]).count(adv)==0:\n",
    "            if xi not in visited_x:\n",
    "                n+=1\n",
    "                visited_x.append(xi)\n",
    "                \n",
    "        b1=b.transpose()\n",
    "        if list(b1[yi]).count(adv)==0:\n",
    "            if yi not in visited_y:\n",
    "                n+=1\n",
    "                visited_y.append(yi)\n",
    "        \n",
    "        if xi==yi:\n",
    "            arr = [b[0][0],b[1][1],b[2][2]]\n",
    "            if list(arr).count(adv)==0:\n",
    "                if flag==0:\n",
    "                    n+=1\n",
    "                    flag=1\n",
    "                    \n",
    "        if xi+yi==2:\n",
    "            arr = [b[0][2],b[1][1],b[2][0]]\n",
    "            if list(arr).count(adv)==0:\n",
    "                if flagu==0:\n",
    "                    n+=1\n",
    "                    flagu=1\n",
    "    if player=='x':\n",
    "        return n\n",
    "    else:\n",
    "        return -n\n",
    "    \n",
    "# def exp_heuristic(state,player):"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## THE TWO GAMES : TIC TAC TOE AND OPEN FIELD TIC TAC TOE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Game:\n",
    "    def __init__(self,name):\n",
    "        self.name=name\n",
    "        self.size=3\n",
    "        self.seq=3\n",
    "        \n",
    "    def actions(self,state):\n",
    "        actions=[0,1,2,3,4,5,6,7,8]\n",
    "        tempo=deepcopy(actions)\n",
    "        index=0\n",
    "        for i in range(0,len(state)):\n",
    "            if state[i]!='0':\n",
    "                temp=actions[i]\n",
    "                tempo.remove(temp)\n",
    "        return tempo\n",
    "\n",
    "    def result(self,state,move,player): \n",
    "        state[move]=player\n",
    "        return state\n",
    "\n",
    "    def terminal_test(self, node):\n",
    "        return eval_func(node.state)!=0 or len(node.actions)==0\n",
    "\n",
    "class Game1:\n",
    "    def __init__(self,name,seq,size):\n",
    "        self.name=name\n",
    "        self.seq=seq\n",
    "        self.size=size\n",
    "        \n",
    "    def actions(self,state):\n",
    "        actions=list(np.arange(self.size*self.size))\n",
    "        tempo=deepcopy(actions)\n",
    "        index=0\n",
    "        for i in range(0,len(state)):\n",
    "            if state[i]!='0':\n",
    "                temp=actions[i]\n",
    "                tempo.remove(temp)\n",
    "        return tempo\n",
    "\n",
    "    def result(self,state,move,player): \n",
    "        state[move]=player\n",
    "        return state\n",
    "\n",
    "    def terminal_test(self, node):\n",
    "        return util_func(node.state,self.seq,self.size)!=0 or len(node.actions)==0 "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## COMMON GAME ENGINE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Node:\n",
    "    def __init__(self,state,utility,player,actions,parent):\n",
    "        self.state=state\n",
    "        self.utility=utility\n",
    "        self.player=player\n",
    "        self.actions=actions\n",
    "        self.parent=parent\n",
    "    \n",
    "    def child(self,game):\n",
    "        child=[]\n",
    "        if self.player==\"x\":\n",
    "            for i in self.actions:\n",
    "                temp=deepcopy(self)\n",
    "                child_actions=game.actions(game.result(temp.state,i,\"o\"))\n",
    "                child_node=Node(game.result(temp.state,i,\"o\"),eval_func(game.result(temp.state,i,\"o\")),\"o\",child_actions,temp)\n",
    "                child.append(child_node)\n",
    "        else:\n",
    "            return child\n",
    "        return child"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## COMMON ALGORITHMS THAT CHANGE GAMES ACCORDING TO FLAGS"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## REGULAR MINIMAX"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "def AI(node,game,flag):\n",
    "    act=0\n",
    "    value = np.inf\n",
    "    if game.terminal_test(node):\n",
    "        return node.utility,0\n",
    "    for i in node.actions:\n",
    "        node.state=game.result(node.state,i,\"o\")\n",
    "        node.actions=game.actions(node.state)\n",
    "        v,acto=human(node,game,flag)\n",
    "        if v<=value:\n",
    "            value=v\n",
    "            act=i\n",
    "        node.state[i]='0'\n",
    "        node.actions.append(i)\n",
    "        if flag==0:\n",
    "            node.utility=eval_func(node.state)\n",
    "        else:\n",
    "            node.utility=util_func(node.state,game.seq,game.size)\n",
    "        node.player='x'\n",
    "    return value,act\n",
    "\n",
    "def human(node,game,flag):\n",
    "    act=0\n",
    "    value = -np.inf\n",
    "    if game.terminal_test(node):\n",
    "        return node.utility,0\n",
    "    for i in node.actions:\n",
    "        node.state=game.result(node.state,i,\"x\")\n",
    "        node.actions=game.actions(node.state)\n",
    "        if flag==0:\n",
    "            node.utility=eval_func(node.state)\n",
    "        else:\n",
    "            node.utility=util_func(node.state,game.seq,game.size)\n",
    "        v,acto=AI(node,game,flag)\n",
    "        if v>=value:\n",
    "            value=v\n",
    "            act=i\n",
    "        node.state[i]='0'\n",
    "        node.actions.append(i)\n",
    "        if flag==0:\n",
    "            node.utility=eval_func(node.state)\n",
    "        else:\n",
    "            node.utility=util_func(node.state,game.seq,game.size)\n",
    "        node.player='o'\n",
    "\n",
    "    return value,act\n",
    "\n",
    "def minimax(node,game,is_max,flag):\n",
    "    if is_max :\n",
    "        if game.terminal_test(node):\n",
    "            return node.utility\n",
    "        temp=deepcopy(node)\n",
    "        value = -np.inf\n",
    "        print(\"make your move\")\n",
    "        act = int(input())\n",
    "        child_actions=game.actions(game.result(temp.state,act,\"x\"))\n",
    "        if flag==0:\n",
    "            utility=eval_func(game.result(temp.state,act,\"x\"))\n",
    "        else:\n",
    "            utility=util_func(game.result(temp.state,act,\"x\"),game.seq,game.size)\n",
    "        child_node=Node(game.result(temp.state,act,\"x\"),utility,\"o\",child_actions,temp)\n",
    "        print(format(np.reshape(temp.state,(game.size,game.size))))\n",
    "        value = minimax(child_node,game,False,flag)\n",
    "        return value\n",
    "    else:\n",
    "        if game.terminal_test(node):\n",
    "            return node.utility\n",
    "        start= time.time() \n",
    "        value,act=AI(node,game,flag)\n",
    "        end = time.time()\n",
    "        print('Evaluation time: {}s'.format(round(end - start, 7)))\n",
    "        temp=deepcopy(node)\n",
    "        child_actions=game.actions(game.result(temp.state,act,\"o\"))\n",
    "        if flag==0:\n",
    "            utility=eval_func(game.result(temp.state,act,\"o\"))\n",
    "        else:\n",
    "            utility=util_func(game.result(temp.state,act,\"o\"),game.seq,game.size)\n",
    "        child_node=Node(game.result(temp.state,act,\"o\"),utility,\"x\",child_actions,temp)\n",
    "        print('AI moves | your turn')\n",
    "        print(np.reshape(child_node.state,(game.size,game.size)))\n",
    "        value = minimax(child_node,game,True,flag)\n",
    "        return value"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## MINIMAX WITH ALPHA BETA PRUNING"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "def human_ab(node,game,a,b,flag):\n",
    "    act=0\n",
    "    value = -np.inf\n",
    "    if game.terminal_test(node):\n",
    "        return node.utility,0\n",
    "    for i in node.actions:\n",
    "        node.state=game.result(node.state,i,\"x\")\n",
    "        node.actions=game.actions(node.state)\n",
    "        node.actions=game.actions(node.state)\n",
    "        if flag==0:\n",
    "            node.utility=eval_func(node.state)\n",
    "        else:\n",
    "            node.utility=util_func(node.state,game.seq,game.size)\n",
    "        v,acto=AI_ab(node,game,a,b,flag)\n",
    "        if v>=value:\n",
    "            value=v\n",
    "            act=i\n",
    "        node.state[i]='0'\n",
    "        node.actions.append(i)\n",
    "        if flag==0:\n",
    "            node.utility=eval_func(node.state)\n",
    "        else:\n",
    "            node.utility=util_func(node.state,game.seq,game.size)\n",
    "        node.player='o'\n",
    "        \n",
    "        if value >= b:\n",
    "            return value,act\n",
    "        if value > a:\n",
    "            a= value\n",
    "    \n",
    "    return value,act\n",
    "\n",
    "def AI_ab(node,game,a,b,flag):\n",
    "    act=0\n",
    "    value = np.inf\n",
    "    if game.terminal_test(node):\n",
    "        return node.utility,0\n",
    "    for i in node.actions:\n",
    "        node.state=game.result(node.state,i,\"o\")\n",
    "        node.actions=game.actions(node.state)\n",
    "        v,acto=human_ab(node,game,a,b,flag)\n",
    "        if v<=value:\n",
    "            value=v\n",
    "            act=i\n",
    "        node.state[i]='0'\n",
    "        node.actions.append(i)\n",
    "        if flag==0:\n",
    "            node.utility=eval_func(node.state)\n",
    "        else:\n",
    "            node.utility=util_func(node.state,game.seq,game.size)\n",
    "        node.player='x'\n",
    "        \n",
    "        if value <= a:\n",
    "            return value,act\n",
    "\n",
    "        if value < b:\n",
    "            beta = value\n",
    "    \n",
    "    return value,act\n",
    "\n",
    "def minimax_ab(node,game,is_max,flag):\n",
    "    if is_max :\n",
    "        if game.terminal_test(node):\n",
    "            return node.utility\n",
    "        temp=deepcopy(node)\n",
    "        value = -np.inf\n",
    "        print(\"make your move\")\n",
    "        act = int(input())\n",
    "        child_actions=game.actions(game.result(temp.state,act,\"x\"))\n",
    "        if flag==0:\n",
    "            utility=eval_func(game.result(temp.state,act,\"x\"))\n",
    "        else:\n",
    "            utility=util_func(game.result(temp.state,act,\"x\"),game.seq,game.size)\n",
    "        child_node=Node(game.result(temp.state,act,\"x\"),utility,\"o\",child_actions,temp)\n",
    "        print(format(np.reshape(temp.state,(game.size,game.size))))\n",
    "        value = minimax_ab(child_node,game,False,flag)\n",
    "        return value\n",
    "    else:\n",
    "        if game.terminal_test(node):\n",
    "            return node.utility\n",
    "        start= time.time() \n",
    "        value,act=AI_ab(node,game,-np.inf,np.inf,flag)\n",
    "        end = time.time()\n",
    "        print('Evaluation time: {}s'.format(round(end - start, 7)))\n",
    "        temp=deepcopy(node)\n",
    "        child_actions=game.actions(game.result(temp.state,act,\"o\"))\n",
    "        if flag==0:\n",
    "            utility=eval_func(game.result(temp.state,act,\"o\"))\n",
    "        else:\n",
    "            utility=util_func(game.result(temp.state,act,\"o\"),game.seq,game.size)\n",
    "        child_node=Node(game.result(temp.state,act,\"o\"),utility,\"x\",child_actions,temp)\n",
    "        print('AI moves | your turn')\n",
    "        print(np.reshape(child_node.state,(game.size,game.size)))\n",
    "        value = minimax_ab(child_node,game,True,flag)\n",
    "        return value\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## MINIMAX WITH DEPTH LIMIT"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "def AI_dl(node,game,depth,flag):\n",
    "    act=0\n",
    "    value = np.inf\n",
    "    if depth==0 or game.terminal_test(node):\n",
    "        return node.utility,0\n",
    "    for i in node.actions:\n",
    "        node.state=game.result(node.state,i,\"o\")\n",
    "        node.actions=game.actions(node.state)\n",
    "        if flag==0:\n",
    "            node.utility=eval_func(node.state)\n",
    "        else:\n",
    "            node.utility=util_func(node.state,game.seq,game.size)\n",
    "        v,acto=human_dl(node,game,depth-1,flag)\n",
    "        if v<=value:\n",
    "            value=v\n",
    "            act=i\n",
    "        node.state[i]='0'\n",
    "        node.actions.append(i)\n",
    "        node.utility=eval_func(node.state)\n",
    "        node.player='x'\n",
    "    return value,act\n",
    "\n",
    "def human_dl(node,game,depth,flag):\n",
    "    act=0\n",
    "    value = -np.inf\n",
    "    if depth==0 or game.terminal_test(node):\n",
    "        return node.utility,0\n",
    "    for i in node.actions:\n",
    "        node.state=game.result(node.state,i,\"x\")\n",
    "        node.actions=game.actions(node.state)\n",
    "        if flag==0:\n",
    "            node.utility=eval_func(node.state)\n",
    "        else:\n",
    "            node.utility=util_func(node.state,game.seq,game.size)\n",
    "        v,acto=AI_dl(node,game,depth-1,flag)\n",
    "        if v>=value:\n",
    "            value=v\n",
    "            act=i\n",
    "        node.state[i]='0'\n",
    "        node.actions.append(i)\n",
    "        node.utility=eval_func(node.state)\n",
    "        node.player='o'\n",
    "\n",
    "    return value,act\n",
    "\n",
    "def minimax_dl(node,game,is_max,depth,flag):\n",
    "    if is_max :\n",
    "        if depth==0 or game.terminal_test(node):\n",
    "            return node.utility\n",
    "        temp=deepcopy(node)\n",
    "        value = -np.inf\n",
    "        print(\"make your move\")\n",
    "        act = int(input())\n",
    "        child_actions=game.actions(game.result(temp.state,act,\"x\"))\n",
    "        if flag==0:\n",
    "            utility=eval_func(game.result(temp.state,act,\"x\"))\n",
    "        else:\n",
    "            utility=util_func(game.result(temp.state,act,\"x\"),game.seq,game.size)\n",
    "        child_node=Node(game.result(temp.state,act,\"x\"),utility,\"o\",child_actions,temp)\n",
    "        print(format(np.reshape(temp.state,(game.size,game.size))))\n",
    "        value = minimax_dl(child_node,game,False,depth,flag)\n",
    "        return value\n",
    "    else:\n",
    "        if game.terminal_test(node):\n",
    "            return node.utility\n",
    "        start= time.time() \n",
    "        value,act=AI_dl(node,game,depth,flag)\n",
    "        end = time.time()\n",
    "        print('Evaluation time: {}s'.format(round(end - start, 7)))\n",
    "        temp=deepcopy(node)\n",
    "        child_actions=game.actions(game.result(temp.state,act,\"o\"))\n",
    "        if flag==0:\n",
    "            utility=eval_func(game.result(temp.state,act,\"o\"))\n",
    "        else:\n",
    "            utility=util_func(game.result(temp.state,act,\"o\"),game.seq,game.size)\n",
    "        child_node=Node(game.result(temp.state,act,\"o\"),utility,\"x\",child_actions,temp)\n",
    "        print('AI moves | your turn')\n",
    "        print(np.reshape(child_node.state,(game.size,game.size)))\n",
    "        value = minimax_dl(child_node,game,True,depth,flag)\n",
    "        return value"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## MINIMAX WITH DEPTH LIMIT AND ALPHA BETA PRUNING"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "def AI_abdl(node,game,depth,a,b,flag):\n",
    "    act=0\n",
    "    value = np.inf\n",
    "    if depth==0 or game.terminal_test(node):\n",
    "        return node.utility,0\n",
    "    if depth==0:\n",
    "        return heuristic(node.state,'o'),0\n",
    "    for i in node.actions:\n",
    "        node.state=game.result(node.state,i,\"o\")\n",
    "        node.actions=game.actions(node.state)\n",
    "        if flag==0:\n",
    "            node.utility=eval_func(node.state)\n",
    "        else:\n",
    "            node.utility=util_func(node.state,game.seq,game.size)\n",
    "        v,acto=human_abdl(node,game,depth-1,a,b,flag)\n",
    "        if v<=value:\n",
    "            value=v\n",
    "            act=i\n",
    "        node.state[i]='0'\n",
    "        node.actions.append(i)\n",
    "        if flag==0:\n",
    "            node.utility=eval_func(node.state)\n",
    "        else:\n",
    "            node.utility=util_func(node.state,game.seq,game.size)\n",
    "        node.player='x'\n",
    "        \n",
    "        \n",
    "        if value <= a:\n",
    "            return value,act\n",
    "\n",
    "        if value < b:\n",
    "            beta = value\n",
    "            \n",
    "    return value,act\n",
    "\n",
    "def human_abdl(node,game,depth,a,b,flag):\n",
    "    act=0\n",
    "    value = -np.inf\n",
    "    if depth==0 or game.terminal_test(node):\n",
    "        return node.utility,0\n",
    "    if depth==0:\n",
    "        return heuristic(node.state,'x'),0\n",
    "    for i in node.actions:\n",
    "        node.state=game.result(node.state,i,\"x\")\n",
    "        node.actions=game.actions(node.state)\n",
    "        if flag==0:\n",
    "            node.utility=eval_func(node.state)\n",
    "        else:\n",
    "            node.utility=util_func(node.state,game.seq,game.size)\n",
    "        v,acto=AI_abdl(node,game,depth-1,a,b,flag)\n",
    "        if v>=value:\n",
    "            value=v\n",
    "            act=i\n",
    "        node.state[i]='0'\n",
    "        node.actions.append(i)\n",
    "        if flag==0:\n",
    "            node.utility=eval_func(node.state)\n",
    "        else:\n",
    "            node.utility=util_func(node.state,game.seq,game.size)\n",
    "        node.player='o'\n",
    "            \n",
    "        if value >= b:\n",
    "            return value,act\n",
    "        \n",
    "        if value > a:\n",
    "            a= value\n",
    "\n",
    "    return value,act\n",
    "\n",
    "def minimax_abdl(node,game,is_max,depth,flag):\n",
    "    if is_max :\n",
    "        if game.terminal_test(node):\n",
    "            return node.utility\n",
    "        temp=deepcopy(node)\n",
    "        value = -np.inf\n",
    "        print(\"make your move\")\n",
    "        act = int(input())\n",
    "        child_actions=game.actions(game.result(temp.state,act,\"x\"))\n",
    "        if flag==0:\n",
    "            utility=eval_func(game.result(temp.state,act,\"x\"))\n",
    "        else:\n",
    "            utility=util_func(game.result(temp.state,act,\"x\"),game.seq,game.size)\n",
    "        child_node=Node(game.result(temp.state,act,\"x\"),utility,\"o\",child_actions,temp)\n",
    "        print(format(np.reshape(temp.state,(game.size,game.size))))\n",
    "        value = minimax_abdl(child_node,game,False,depth,flag)\n",
    "        return value\n",
    "    else:\n",
    "        if game.terminal_test(node):\n",
    "            return node.utility\n",
    "        start= time.time() \n",
    "        value,act=AI_abdl(node,game,depth,-np.inf,np.inf,flag)\n",
    "        end = time.time()\n",
    "        print('Evaluation time: {}s'.format(round(end - start, 7)))\n",
    "        temp=deepcopy(node)\n",
    "        child_actions=game.actions(game.result(temp.state,act,\"o\"))\n",
    "        if flag==0:\n",
    "            utility=eval_func(game.result(temp.state,act,\"o\"))\n",
    "        else:\n",
    "            utility=util_func(game.result(temp.state,act,\"o\"),game.seq,game.size)\n",
    "        child_node=Node(game.result(temp.state,act,\"o\"),utility,\"x\",child_actions,temp)\n",
    "        print('AI moves | your turn')\n",
    "        print(np.reshape(child_node.state,(game.size,game.size)))\n",
    "        value = minimax_abdl(child_node,game,True,depth,flag)\n",
    "        return value"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## MY IMPROVEMENTBY USING A HEURISTIC CALLED NUMBER OF WINS FROM THAT POSITION"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "def AI_abdl_imp(node,game,depth,a,b,flag):\n",
    "    value = np.inf\n",
    "    if depth==0 or game.terminal_test(node):\n",
    "        return node.utility,0\n",
    "    if depth==0:\n",
    "        return heuristic(node.state,'o'),0\n",
    "    for i in node.actions:\n",
    "        node.state=game.result(node.state,i,\"o\")\n",
    "        node.actions=game.actions(node.state)\n",
    "        if eval_func(node.state)!=0:\n",
    "            node.utility=eval_func(node.state)\n",
    "        else:\n",
    "            node.utility=heuristic(node.state,'o')\n",
    "        v,acto=human_abdl_imp(node,game,depth-1,a,b,flag)\n",
    "        if v<=value:\n",
    "            value=v\n",
    "            act=i\n",
    "        node.state[i]='0'\n",
    "        node.actions.append(i)\n",
    "        node.utility=eval_func(node.state)\n",
    "        node.player='x'\n",
    "        \n",
    "        \n",
    "        if value <= a:\n",
    "            return value,act\n",
    "\n",
    "        if value < b:\n",
    "            beta = value\n",
    "            \n",
    "    return value,act\n",
    "\n",
    "def human_abdl_imp(node,game,depth,a,b,flag):\n",
    "    value = -np.inf\n",
    "    if depth==0 or game.terminal_test(node):\n",
    "        return node.utility,0\n",
    "    if depth==0:\n",
    "        return heuristic(node.state,'x'),0\n",
    "    for i in node.actions:\n",
    "        node.state=game.result(node.state,i,\"x\")\n",
    "        node.actions=game.actions(node.state)\n",
    "        if eval_func(node.state)!=0:\n",
    "            node.utility=eval_func(node.state)\n",
    "        else:\n",
    "            node.utility=heuristic(node.state,'x')\n",
    "        v,acto=AI_abdl_imp(node,game,depth-1,a,b,flag)\n",
    "        if v>=value:\n",
    "            value=v\n",
    "            act=i\n",
    "        node.state[i]='0'\n",
    "        node.actions.append(i)\n",
    "        node.utility=eval_func(node.state)\n",
    "        node.player='o'\n",
    "            \n",
    "        if value >= b:\n",
    "            return value,act\n",
    "        \n",
    "        if value > a:\n",
    "            a= value\n",
    "\n",
    "    return value,act\n",
    "\n",
    "def minimax_abdl_imp(node,game,is_max,depth,flag):\n",
    "    if is_max :\n",
    "        if game.terminal_test(node):\n",
    "            return node.utility\n",
    "        temp=deepcopy(node)\n",
    "        value = -np.inf\n",
    "        print(\"make your move\")\n",
    "        act = int(input())\n",
    "        child_actions=game.actions(game.result(temp.state,act,\"x\"))\n",
    "        if flag==0:\n",
    "            utility=eval_func(game.result(temp.state,act,\"x\"))\n",
    "        else:\n",
    "            utility=util_func(game.result(temp.state,act,\"x\"),game.seq,game.size)\n",
    "        child_node=Node(game.result(temp.state,act,\"x\"),utility,\"o\",child_actions,temp)\n",
    "        print(format(np.reshape(temp.state,(game.size,game.size))))\n",
    "        value = minimax_abdl_imp(child_node,game,False,depth,flag)\n",
    "        return value\n",
    "    else:\n",
    "        if game.terminal_test(node):\n",
    "            return node.utility\n",
    "        start= time.time() \n",
    "        value,act=AI_abdl_imp(node,game,depth,-np.inf,np.inf,flag)\n",
    "        end = time.time()\n",
    "        print('Evaluation time: {}s'.format(round(end - start, 7)))\n",
    "        temp=deepcopy(node)\n",
    "        child_actions=game.actions(game.result(temp.state,act,\"o\"))\n",
    "        if flag==0:\n",
    "            utility=eval_func(game.result(temp.state,act,\"o\"))\n",
    "        else:\n",
    "            utility=util_func(game.result(temp.state,act,\"o\"),game.seq,game.size)\n",
    "        child_node=Node(game.result(temp.state,act,\"o\"),utility,\"x\",child_actions,temp)\n",
    "        print('AI moves | your turn')\n",
    "        print(np.reshape(child_node.state,(game.size,game.size)))\n",
    "        value = minimax_abdl_imp(child_node,game,True,depth,flag)\n",
    "        return value"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## SOLUTIONS"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## GAME 1 TIC TAC TOE"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## MY IMPROVED ALGORITHM RUNTIME: 0.10 SECONDS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "guide:\n",
      "[['0' '1' '2']\n",
      " ['3' '4' '5']\n",
      " ['6' '7' '8']]\n",
      "make your move\n",
      "0\n",
      "[['x' '0' '0']\n",
      " ['0' '0' '0']\n",
      " ['0' '0' '0']]\n",
      "Evaluation time: 0.0897577s\n",
      "AI moves | your turn\n",
      "[['x' '0' '0']\n",
      " ['0' '0' '0']\n",
      " ['0' '0' 'o']]\n",
      "make your move\n",
      "2\n",
      "[['x' '0' 'x']\n",
      " ['0' '0' '0']\n",
      " ['0' '0' 'o']]\n",
      "Evaluation time: 0.013998s\n",
      "AI moves | your turn\n",
      "[['x' '0' 'x']\n",
      " ['0' '0' '0']\n",
      " ['0' 'o' 'o']]\n",
      "make your move\n",
      "6\n",
      "[['x' '0' 'x']\n",
      " ['0' '0' '0']\n",
      " ['x' 'o' 'o']]\n",
      "Evaluation time: 0.0019951s\n",
      "AI moves | your turn\n",
      "[['x' '0' 'x']\n",
      " ['0' '0' 'o']\n",
      " ['x' 'o' 'o']]\n",
      "make your move\n",
      "1\n",
      "[['x' 'x' 'x']\n",
      " ['0' '0' 'o']\n",
      " ['x' 'o' 'o']]\n",
      "\n",
      "You Won!!\n"
     ]
    }
   ],
   "source": [
    "board=[\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\"]\n",
    "initial_actions=[0,1,2,3,4,5,6,7,8]\n",
    "initial=Node(board,eval_func(board),'o',initial_actions,None)\n",
    "game=Game(\"TIC TAC TOE\")\n",
    "i_board=[\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\"]\n",
    "print(\"guide:\")\n",
    "print(np.reshape(i_board,(3,3)))\n",
    "j=minimax_abdl_imp(initial,game,True,4,0)\n",
    "print()\n",
    "if j>0:\n",
    "    print(\"You Won!!\")\n",
    "elif j<0:\n",
    "    print(\"You Lost!!Try again\")\n",
    "else:\n",
    "    print(\"It's A Draw!!\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## ALPHA BETA PRUNING WITH DEPTH LIMIT RUNTIME : 0.16 SECONDS (IMPROVED BY MY NEW EVAL FUNCTION BY 0.06 SECONDS)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "guide:\n",
      "[['0' '1' '2']\n",
      " ['3' '4' '5']\n",
      " ['6' '7' '8']]\n",
      "make your move\n",
      "0\n",
      "[['x' '0' '0']\n",
      " ['0' '0' '0']\n",
      " ['0' '0' '0']]\n",
      "Evaluation time: 0.2652917s\n",
      "AI moves | your turn\n",
      "[['x' '0' '0']\n",
      " ['0' '0' '0']\n",
      " ['0' '0' 'o']]\n",
      "make your move\n",
      "6\n",
      "[['x' '0' '0']\n",
      " ['0' '0' '0']\n",
      " ['x' '0' 'o']]\n",
      "Evaluation time: 0.0501091s\n",
      "AI moves | your turn\n",
      "[['x' '0' '0']\n",
      " ['0' '0' '0']\n",
      " ['x' 'o' 'o']]\n",
      "make your move\n"
     ]
    }
   ],
   "source": [
    "board=[\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\"]\n",
    "initial_actions=[0,1,2,3,4,5,6,7,8]\n",
    "initial=Node(board,eval_func(board),'o',initial_actions,None)\n",
    "game=Game(\"TIC TAC TOE\")\n",
    "i_board=[\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\"]\n",
    "print(\"guide:\")\n",
    "print(np.reshape(i_board,(3,3)))\n",
    "j=minimax_abdl(initial,game,True,5,0)\n",
    "print()\n",
    "if j>0:\n",
    "    print(\"You Won!!\")\n",
    "elif j<0:\n",
    "    print(\"You Lost!!Try again\")\n",
    "else:\n",
    "    print(\"It's A Draw!!\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## DEPTH LIMIT RUNTIME: 0.38 SECONDS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "guide:\n",
      "[['0' '1' '2']\n",
      " ['3' '4' '5']\n",
      " ['6' '7' '8']]\n",
      "make your move\n",
      "0\n",
      "[['x' '0' '0']\n",
      " ['0' '0' '0']\n",
      " ['0' '0' '0']]\n",
      "Evaluation time: 0.3401239s\n",
      "AI moves | your turn\n",
      "[['x' '0' '0']\n",
      " ['0' '0' '0']\n",
      " ['0' '0' 'o']]\n",
      "make your move\n",
      "4\n",
      "[['x' '0' '0']\n",
      " ['0' 'x' '0']\n",
      " ['0' '0' 'o']]\n",
      "Evaluation time: 0.0419228s\n",
      "AI moves | your turn\n",
      "[['x' '0' '0']\n",
      " ['0' 'x' '0']\n",
      " ['o' '0' 'o']]\n",
      "make your move\n",
      "7\n",
      "[['x' '0' '0']\n",
      " ['0' 'x' '0']\n",
      " ['o' 'x' 'o']]\n",
      "Evaluation time: 0.0019979s\n",
      "AI moves | your turn\n",
      "[['x' 'o' '0']\n",
      " ['0' 'x' '0']\n",
      " ['o' 'x' 'o']]\n",
      "make your move\n",
      "2\n",
      "[['x' 'o' 'x']\n",
      " ['0' 'x' '0']\n",
      " ['o' 'x' 'o']]\n",
      "Evaluation time: 0.0s\n",
      "AI moves | your turn\n",
      "[['x' 'o' 'x']\n",
      " ['0' 'x' 'o']\n",
      " ['o' 'x' 'o']]\n",
      "make your move\n",
      "3\n",
      "[['x' 'o' 'x']\n",
      " ['x' 'x' 'o']\n",
      " ['o' 'x' 'o']]\n",
      "\n",
      "It's A Draw!!\n"
     ]
    }
   ],
   "source": [
    "board=[\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\"]\n",
    "initial_actions=[0,1,2,3,4,5,6,7,8]\n",
    "initial=Node(board,eval_func(board),'o',initial_actions,None)\n",
    "game=Game(\"TIC TAC TOE\")\n",
    "i_board=[\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\"]\n",
    "print(\"guide:\")\n",
    "print(np.reshape(i_board,(3,3)))\n",
    "j=minimax_dl(initial,game,True,5,0)\n",
    "print()\n",
    "if j>0:\n",
    "    print(\"You Won!!\")\n",
    "elif j<0:\n",
    "    print(\"You Lost!!Try again\")\n",
    "else:\n",
    "    print(\"It's A Draw!!\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## ALPHA BETA PRUNING RUNTIME: 0.88 SECONDS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "guide:\n",
      "[['0' '1' '2']\n",
      " ['3' '4' '5']\n",
      " ['6' '7' '8']]\n",
      "make your move\n",
      "6\n",
      "[['0' '0' '0']\n",
      " ['0' '0' '0']\n",
      " ['x' '0' '0']]\n",
      "Evaluation time: 1.0382609s\n",
      "AI moves | your turn\n",
      "[['0' '0' '0']\n",
      " ['0' 'o' '0']\n",
      " ['x' '0' '0']]\n",
      "make your move\n",
      "0\n",
      "[['x' '0' '0']\n",
      " ['0' 'o' '0']\n",
      " ['x' '0' '0']]\n",
      "Evaluation time: 0.0418825s\n",
      "AI moves | your turn\n",
      "[['x' '0' '0']\n",
      " ['o' 'o' '0']\n",
      " ['x' '0' '0']]\n",
      "make your move\n",
      "5\n",
      "[['x' '0' '0']\n",
      " ['o' 'o' 'x']\n",
      " ['x' '0' '0']]\n",
      "Evaluation time: 0.0082881s\n",
      "AI moves | your turn\n",
      "[['x' '0' '0']\n",
      " ['o' 'o' 'x']\n",
      " ['x' '0' 'o']]\n",
      "make your move\n",
      "3\n",
      "[['x' '0' '0']\n",
      " ['x' 'o' 'x']\n",
      " ['x' '0' 'o']]\n",
      "\n",
      "You Won!!\n"
     ]
    }
   ],
   "source": [
    "board=[\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\"]\n",
    "initial_actions=[0,1,2,3,4,5,6,7,8]\n",
    "initial=Node(board,eval_func(board),'o',initial_actions,None)\n",
    "game=Game(\"TIC TAC TOE\")\n",
    "i_board=[\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\"]\n",
    "print(\"guide:\")\n",
    "print(np.reshape(i_board,(3,3)))\n",
    "j=minimax_ab(initial,game,True,0)\n",
    "print()\n",
    "if j>0:\n",
    "    print(\"You Won!!\")\n",
    "elif j<0:\n",
    "    print(\"You Lost!!Try again\")\n",
    "else:\n",
    "    print(\"It's A Draw!!\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## REGULAR MINIMAX RUNTIME: 2.8 SECONDS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "guide:\n",
      "[['0' '1' '2']\n",
      " ['3' '4' '5']\n",
      " ['6' '7' '8']]\n",
      "make your move\n",
      "0\n",
      "[['x' '0' '0']\n",
      " ['0' '0' '0']\n",
      " ['0' '0' '0']]\n",
      "Evaluation time: 2.8514054s\n",
      "AI moves | your turn\n",
      "[['x' '0' '0']\n",
      " ['0' 'o' '0']\n",
      " ['0' '0' '0']]\n",
      "make your move\n",
      "1\n",
      "[['x' 'x' '0']\n",
      " ['0' 'o' '0']\n",
      " ['0' '0' '0']]\n",
      "Evaluation time: 0.0458767s\n",
      "AI moves | your turn\n",
      "[['x' 'x' 'o']\n",
      " ['0' 'o' '0']\n",
      " ['0' '0' '0']]\n",
      "make your move\n",
      "3\n",
      "[['x' 'x' 'o']\n",
      " ['x' 'o' '0']\n",
      " ['0' '0' '0']]\n",
      "Evaluation time: 0.0009968s\n",
      "AI moves | your turn\n",
      "[['x' 'x' 'o']\n",
      " ['x' 'o' '0']\n",
      " ['o' '0' '0']]\n",
      "\n",
      "You Lost!!Try again\n"
     ]
    }
   ],
   "source": [
    "board=[\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\"]\n",
    "initial_actions=[0,1,2,3,4,5,6,7,8]\n",
    "initial=Node(board,eval_func(board),'o',initial_actions,None)\n",
    "game=Game(\"TIC TAC TOE\")\n",
    "i_board=[\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\"]\n",
    "print(\"guide:\")\n",
    "print(np.reshape(i_board,(3,3)))\n",
    "j=minimax(initial,game,True,0)\n",
    "print()\n",
    "if j>0:\n",
    "    print(\"You Won!!\")\n",
    "elif j<0:\n",
    "    print(\"You Lost!!Try again\")\n",
    "else:\n",
    "    print(\"It's A Draw!!\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## GAME 2: OPEN FIELD TIC TAC TOE"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## ONLY SOLUTION FOR ALPHA BETA AND DEPTH LIMIT IS SHOWN AS OTHERS ARE TAKING A LOT OF TIME TO MOVE....AS THIS ALGORITHM CONTAINS ALL MINIMAX DEPTH LIMIT AND ALPHA BETA PRUNING IT SHOWS THAT ALL ALGORITHMS WORK"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter the size of the board: 6\n",
      "Enter the size of the sequence: 4\n",
      "make your move\n",
      "0\n",
      "[['x' '0' '0' '0' '0' '0']\n",
      " ['0' '0' '0' '0' '0' '0']\n",
      " ['0' '0' '0' '0' '0' '0']\n",
      " ['0' '0' '0' '0' '0' '0']\n",
      " ['0' '0' '0' '0' '0' '0']\n",
      " ['0' '0' '0' '0' '0' '0']]\n",
      "Evaluation time: 3.0318906s\n",
      "AI moves | your turn\n",
      "[['x' '0' '0' '0' '0' '0']\n",
      " ['0' '0' '0' '0' '0' '0']\n",
      " ['0' '0' '0' '0' '0' '0']\n",
      " ['0' '0' '0' '0' '0' '0']\n",
      " ['0' '0' '0' '0' '0' '0']\n",
      " ['0' '0' '0' '0' '0' 'o']]\n",
      "make your move\n",
      "1\n",
      "[['x' 'x' '0' '0' '0' '0']\n",
      " ['0' '0' '0' '0' '0' '0']\n",
      " ['0' '0' '0' '0' '0' '0']\n",
      " ['0' '0' '0' '0' '0' '0']\n",
      " ['0' '0' '0' '0' '0' '0']\n",
      " ['0' '0' '0' '0' '0' 'o']]\n",
      "Evaluation time: 2.4085953s\n",
      "AI moves | your turn\n",
      "[['x' 'x' '0' '0' '0' '0']\n",
      " ['0' '0' '0' '0' '0' '0']\n",
      " ['0' '0' '0' '0' '0' '0']\n",
      " ['0' '0' '0' '0' '0' '0']\n",
      " ['0' '0' '0' '0' '0' '0']\n",
      " ['0' '0' '0' '0' 'o' 'o']]\n",
      "make your move\n",
      "2\n",
      "[['x' 'x' 'x' '0' '0' '0']\n",
      " ['0' '0' '0' '0' '0' '0']\n",
      " ['0' '0' '0' '0' '0' '0']\n",
      " ['0' '0' '0' '0' '0' '0']\n",
      " ['0' '0' '0' '0' '0' '0']\n",
      " ['0' '0' '0' '0' 'o' 'o']]\n",
      "Evaluation time: 1.4860637s\n",
      "AI moves | your turn\n",
      "[['x' 'x' 'x' 'o' '0' '0']\n",
      " ['0' '0' '0' '0' '0' '0']\n",
      " ['0' '0' '0' '0' '0' '0']\n",
      " ['0' '0' '0' '0' '0' '0']\n",
      " ['0' '0' '0' '0' '0' '0']\n",
      " ['0' '0' '0' '0' 'o' 'o']]\n",
      "make your move\n",
      "6\n",
      "[['x' 'x' 'x' 'o' '0' '0']\n",
      " ['x' '0' '0' '0' '0' '0']\n",
      " ['0' '0' '0' '0' '0' '0']\n",
      " ['0' '0' '0' '0' '0' '0']\n",
      " ['0' '0' '0' '0' '0' '0']\n",
      " ['0' '0' '0' '0' 'o' 'o']]\n",
      "Evaluation time: 3.0234935s\n",
      "AI moves | your turn\n",
      "[['x' 'x' 'x' 'o' '0' '0']\n",
      " ['x' '0' '0' '0' '0' '0']\n",
      " ['0' '0' '0' '0' '0' '0']\n",
      " ['0' '0' '0' '0' '0' '0']\n",
      " ['0' '0' '0' '0' '0' '0']\n",
      " ['0' '0' '0' 'o' 'o' 'o']]\n",
      "make your move\n"
     ]
    }
   ],
   "source": [
    "size=int(input(\"Enter the size of the board: \"))\n",
    "seq=int(input(\"Enter the size of the sequence: \"))\n",
    "board=[]\n",
    "for i in range(0,size*size):\n",
    "    board.append(\"0\")\n",
    "initial_actions=list(np.arange(size))\n",
    "initial=Node(board,util_func(board,seq,size),'o',initial_actions,None)\n",
    "gam=Game1(\"TIC TAC TOE\",seq,size)\n",
    "i=minimax_abdl(initial,gam,True,3,1)\n",
    "print(i)\n",
    "if i>0:\n",
    "    print(\"You Won!!\")\n",
    "elif i<0:\n",
    "    print(\"You Lost!!Try again\")\n",
    "else:\n",
    "    print(\"It's A Draw!!\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
